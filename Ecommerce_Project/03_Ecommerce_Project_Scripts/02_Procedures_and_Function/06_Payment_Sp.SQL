

CREATE OR REPLACE PROCEDURE PAYMENT_SP (
    P_CUSTOMER_ID IN NUMBER,
    P_ORDER_ID IN NUMBER,
    P_PAYMENT_METHOD IN VARCHAR2,
    P_AMOUNT IN NUMBER,
    P_STATUS OUT VARCHAR2
)
AS
    V_PMT NUMBER;
    V_SHMT NUMBER;
    V_AMOUNT NUMBER;
    V_ADD VARCHAR2(200);
    V_DTTM DATE;
    V_ORDER_AMOUNT NUMBER;
    V_PAID_AMOUNT NUMBER;
BEGIN
    P_STATUS := NULL;

    -- RETRIEVE THE NEXT PAYMENT AND SHIPMENT IDS
    SELECT PAY_SEQ.NEXTVAL INTO V_PMT FROM DUAL;
    SELECT SHMT_SEQ.NEXTVAL INTO V_SHMT FROM DUAL;

    -- RETRIEVE THE ADDRESS OF THE CUSTOMER
    SELECT address INTO V_ADD FROM CUSTOMERS_TB WHERE CUSTOMER_ID = P_CUSTOMER_ID;

    -- CALCULATE THE EXPECTED ORDER AMOUNT
    SELECT TOTAL_PRICE INTO V_ORDER_AMOUNT FROM ORDER_TB WHERE CUSTOMER_ID = P_CUSTOMER_ID AND ORDER_ID = P_ORDER_ID;

    -- CALCULATE THE TOTAL AMOUNT ALREADY PAID BY THE CUSTOMER
    SELECT NVL(SUM(AMOUNT), 0) INTO V_PAID_AMOUNT FROM PAYMENT_TB WHERE CUSTOMER_ID = P_CUSTOMER_ID;

    -- CHECK IF THE PAYMENT AMOUNT MATCHES THE EXPECTED ORDER AMOUNT
    IF P_AMOUNT = (V_ORDER_AMOUNT - V_PAID_AMOUNT) THEN
        
        INSERT INTO PAYMENT_TB (
            PAYMENT_ID,
            PAYMENT_DATE,
            PAYMENT_METHOD,
            AMOUNT,
            CUSTOMER_ID,
            SHIPMENT_ID
        ) VALUES (
            V_PMT,
            SYSTIMESTAMP,
            P_PAYMENT_METHOD,
            P_AMOUNT,
            P_CUSTOMER_ID,
            V_SHMT
        );

        P_STATUS := 'SUCCESSFULLY PAID';
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'PAYMENT FAILED: Incorrect payment amount.');
    END IF;

    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        P_STATUS := 'FAILED';
        P_STATUS := SQLERRM;
    WHEN OTHERS THEN
        ROLLBACK;
        P_STATUS := 'FAILED';
        P_STATUS := SQLERRM;
END;
/

